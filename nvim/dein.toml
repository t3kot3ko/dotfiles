[[plugins]]
repo = 'Shougo/dein.vim'
[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'
[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'
[[plugins]]
repo = "NLKNguyen/papercolor-theme"
hook_add = '''
set background=dark
au MyAutoCmd VimEnter * nested colorscheme PaperColor
'''
[[plugins]]
repo = "edkolev/tmuxline.vim"
[[plugins]]
repo = "vim-airline/vim-airline"
[[plugins]]
repo = "vim-airline/vim-airline-themes"

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
hook_add = '''
imap <C-e>     <Plug>(neosnippet_expand_or_jump)
smap <C-e>     <Plug>(neosnippet_expand_or_jump)
xmap <C-e>     <Plug>(neosnippet_expand_target)
'''
[[plugins]]
repo = 'vim-scripts/AutoClose'
on_i = 1
[[plugins]]
repo = 'Shougo/neomru.vim'
on_path = '.*'

# Disabled due to the conflict of <CR>
# [[plugins]]
# repo = 'jiangmiao/auto-pairs'
# on_i = 1

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_path = '.*'
on_i = 1
[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets']
on_i = 1
on_ft = ['snippet']
# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
[[plugins]]
repo = "neoclide/coc.nvim"
rev = "release"
build = "./install.sh nightly"
[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_add = '''
let g:unite_enable_start_insert = 1
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1
nnoremap <silent> ,g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
nnoremap <silent> ,G :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>
nnoremap <silent> ,r :<C-u>UniteResume search-buffer<CR>

if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif
'''
[[plugins]]
repo = "Shougo/unite-outline"

# Disabled due to the conflict of <CR>
# [[plugins]]
# repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'vim-scripts/surround.vim'
[[plugins]]
repo = "tpope/vim-repeat"
# [[plugins]]
# repo = 'itchyny/lightline.vim'
# hook_add = '''
# let path = fnamemodify(expand($MYVIMRC), ":h")."/lightline.vim"
# exec "source " . path
# '''
[[plugins]]
repo = "thinca/vim-quickrun"
[[plugins]]
repo = 'vim-scripts/YankRing.vim'
[[plugins]]
repo = "Lokaltog/vim-easymotion"
[[plugins]]
repo = "vim-scripts/sudo.vim"
[[plugins]]
repo = 'vim-scripts/spinner.vim'
# [[plugins]]
# repo = "othree/vim-autocomplpop"
[[plugins]]
repo = "vim-scripts/FuzzyFinder"
depends = ["L9"]
[[plugins]]
repo = "vim-scripts/L9"
[[plugins]]
repo = "dag/vim-fish"
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_post_source = '''
" Use ag instead of grep
call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'default_opts', ['--follow', '--no-group', '--no-color'])
" Keymappings
call denite#custom#map(
      \ 'insert',
      \ '<C-j>',
      \ '<denite:move_to_next_line>',
      \ 'noremap'
      \)
call denite#custom#map(
      \ 'insert',
      \ '<C-k>',
      \ '<denite:move_to_previous_line>',
      \ 'noremap'
      \)

nmap <silent> <C-u><C-t> :<C-u>Denite filetype<CR>
nmap <silent> <C-u><C-p> :<C-u>Denite file_rec<CR>
nmap <silent> <C-u><C-j> :<C-u>Denite line<CR>
nmap <silent> <C-u><C-g> :<C-u>Denite grep<CR>
nmap <silent> <C-u><C-]> :<C-u>DeniteCursorWord grep<CR>
nmap <silent> <C-u><C-u> :<C-u>Denite file_mru<CR>
nmap <silent> <C-u><C-y> :<C-u>Denite neoyank<CR>
nmap <silent> <C-u><C-r> :<C-u>Denite -resume<CR>
nmap <silent> <C-u>; :<C-u>Denite -resume -immediately -select=+1<CR>
nmap <silent> <C-u>- :<C-u>Denite -resume -immediately -select=-1<CR>
'''
[[plugins]]
repo = 'majutsushi/tagbar'
[[plugins]]
repo = "kassio/neoterm"
[[plugins]]
repo = "junegunn/fzf"
build = "./install --all"
[[plugins]]
repo = "junegunn/fzf.vim"
[[plugins]]
repo = "vim-scripts/gtags.vim"
[[plugins]]
repo = "Chiel92/vim-autoformat"
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
map <A-n> :NERDTreeToggle<CR>
'''
[[plugins]]
repo = 'rking/ag.vim'
[[plugins]]
repo = "Shougo/defx.nvim"
hook_add = '''
nnoremap - :<C-u>Defx -split=vertical -toggle -winwidth=50<CR>

autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
endfunction
'''
[[plugins]]
repo = 'neomake/neomake'

# Ruby / Rails
[[plugins]]
repo = 'tpope/vim-rails'
[[plugins]]
repo = 'vim-scripts/ruby-matchit'
[[plugins]]
repo = 'vim-ruby/vim-ruby'
[[plugins]]
repo = 'vim-scripts/rails.vim'
[[plugins]]
repo = 'tpope/vim-rails'

# Golang
# [[plugins]]
# repo = "vim-jp/vim-go-extra"
# on_ft = "go"
[[plugins]]
repo = "fatih/vim-go"
on_ft = "go"
hook_add = '''
  let g:go_fmt_command = "goimports"
  let g:go_def_mapping_enabled = 0
  let g:go_doc_keywordprg_enabled = 0
'''
# C/C++
[[plugins]]
repo = "justmao945/vim-clang"

# Git
[[plugins]]
repo = "tpope/vim-fugitive"
[[plugins]]
repo = "tpope/vim-git"
[[plugins]]
repo = "lambdalisue/gina.vim"

# Markdown
[[plugins]]
repo = "plasticboy/vim-markdown"
[[plugins]]
repo = "kannokanno/previm"
[[plugins]]
repo = "tyru/open-browser.vim"
[[plugins]]
repo = "dhruvasagar/vim-table-mode"
on_ft = "markdown"

# Python
[[plugins]]
repo = "ivanov/vim-ipython"
on_ft = "python"

# JavaScript/Nodejs
[[plugins]]
repo = "myhere/vim-nodejs-complete"
on_ft = "js"
hook_add = '''
let g:nodejs_complete_config = {
      \  'js_compl_fn': 'jscomplete#CompleteJS',
      \  'max_node_compl_len': 15
      \}
'''

[[plugins]]
repo = "pangloss/vim-javascript"
on_ft = "javascript"
[[plugins]]
repo = "marijnh/tern_for_vim"
on_ft = "javascript"

# TypeScript
[[plugins]]
repo = "mhartington/nvim-typescript"
[[plugins]]
repo = "HerringtonDarkholme/yats.vim"
[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'

[[plugins]]
repo = "ElmCast/elm-vim"
on_ft = "elm"

